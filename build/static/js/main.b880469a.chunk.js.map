{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Box","props","state","isFlipped","handleClick","bind","e","preventDefault","this","setState","prevState","className","onClick","flipDirection","title","titleEng","desc","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mUAyBMA,E,kDAEJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACCC,MAAQ,CACXC,WAAW,GAEf,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBALF,E,wDAQPC,GACVA,EAAEC,iBACFC,KAAKC,UAAS,SAAAC,GAAS,MAAK,CAAEP,WAAYO,EAAUP,gB,+BAIpD,OACE,yBAAKQ,UAAU,YAAYC,QAASJ,KAAKJ,aACzC,kBAAC,IAAD,CAAeD,UAAWK,KAAKN,MAAMC,UAAWU,cAAc,YAE5D,yBAAKF,UAAU,YACb,uBAAGA,UAAU,YAAYH,KAAKP,MAAMa,OACpC,uBAAGH,UAAU,YAAYH,KAAKP,MAAMc,WAGtC,6BACE,uBAAGJ,UAAU,QAAQH,KAAKP,MAAMe,a,GA1BxBC,IAAMC,WAmCTC,EAvDf,WACE,OACE,yBAAKR,UAAU,OACb,yBAAKA,UAAU,kBACf,kBAAC,EAAD,CAAKG,MAAM,UAAUC,SAAS,cAAcC,KAAK,4FACjD,kBAAC,EAAD,CAAKF,MAAM,QAAQC,SAAS,aAAaC,KAAK,uEAC9C,kBAAC,EAAD,CAAKF,MAAM,UAAUC,SAAS,SAASC,KAAK,qGAC5C,kBAAC,EAAD,CAAKF,MAAM,UAAUC,SAAS,UAAUC,KAAK,oEAC7C,kBAAC,EAAD,CAAKF,MAAM,SAASC,SAAS,kBAAkBC,KAAK,2GACpD,kBAAC,EAAD,CAAKF,MAAM,UAAUC,SAAS,SAASC,KAAK,6IAC5C,kBAAC,EAAD,CAAKF,MAAM,MAAMC,SAAS,aAAaC,KAAK,qGAC5C,kBAAC,EAAD,CAAKF,MAAM,UAAUC,SAAS,WAAWC,KAAK,qIAC9C,kBAAC,EAAD,CAAKF,MAAM,QAAQC,SAAS,gBAAgBC,KAAK,qHACjD,kBAAC,EAAD,CAAKF,MAAM,QAAQC,SAAS,QAAQC,KAAK,mFCN3BI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b880469a.chunk.js","sourcesContent":["import React from 'react';\nimport ReactCardFlip from 'react-card-flip';\nimport './App.css';\nimport { render } from '@testing-library/react';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"grid-container\">\n      <Box title=\"Malkhut\" titleEng=\"Sovereignty\" desc=\"Thou shalt share thyself with others by expressing your authentic emotions and thoughts\"/>\n      <Box title=\"Yesod\" titleEng=\"Foundation\" desc=\"Thou shalt live a life filled with balance and grounded staibility\"/>\n      <Box title=\"Tiferet\" titleEng=\"Beauty\" desc=\"Thow shalt recognize that there is true beauty in the world and that you are part of that beauty\"/>\n      <Box title=\"Netzach\" titleEng=\"Victory\" desc=\"Thou shalt work with passion and energy to achieve significance\"/>\n      <Box title=\"Chesed\" titleEng=\"Loving-kindness\" desc=\"Thou shalt treat all of God's creatures with loving-kindness so that the world may function in harmony\"/>\n      <Box title=\"Chochma\" titleEng=\"Wisdom\" desc=\"Thou shalt strive to elevate your thinking to a level characterized by intutive insight, deeper perception, knowledge and good judgement\"/>\n      <Box title=\"Hod\" titleEng=\"Commitment\" desc=\"Thou shalt be accountable for your values and live every day with determination and perseverance\"/>\n      <Box title=\"Gevurah\" titleEng=\"Strength\" desc=\"Thou shalt act with discipline, restraint, fortitude, and resilience in order to overcome obstacles and live life with integrity\"/>\n      <Box title=\"Binah\" titleEng=\"Understanding\" desc=\"Thou shalt listen to others' thoughts and feelings and work to fully comprehend other people's ideas and beliefs\"/>\n      <Box title=\"Keter\" titleEng=\"Crown\" desc=\"Thou shalt recognize that all people have within them a spark of the divine\"/>\n      </div>\n    </div>\n  );\n}\n\n\nclass Box extends React.Component {\n\n  constructor(props) {\n    super(props);\n      this.state = {\n        isFlipped: false\n      };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    e.preventDefault();\n    this.setState(prevState => ({ isFlipped: !prevState.isFlipped }));\n  }\n\n  render() {\n    return (\n      <div className=\"grid-item\" onClick={this.handleClick}>\n      <ReactCardFlip isFlipped={this.state.isFlipped} flipDirection=\"vertical\">\n\n        <div className=\"titleDiv\">\n          <p className=\"titleHeb\">{this.props.title}</p>\n          <p className=\"titleEng\">{this.props.titleEng}</p>\n        </div>\n\n        <div>\n          <p className=\"desc\">{this.props.desc}</p>\n        </div>\n      </ReactCardFlip>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}